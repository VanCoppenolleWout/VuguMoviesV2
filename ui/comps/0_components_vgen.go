package comps

// Code generated by vugu via vugugen. Please regenerate instead of editing or add additional code in a separate file. DO NOT EDIT.

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"

import (
	"github.com/vugu-examples/taco-store/ui/format"
	"github.com/vugu-examples/taco-store/ui/state"
	"github.com/vugu/vgrouter"
	"log"
)

type TopNav struct {
	vgrouter.NavigatorRef
	state.CartAPIRef
}

func (c *TopNav) Init(ctx vugu.InitCtx) {
	go func() {
		_, updated, err := c.GetCart()
		if err != nil {
			log.Printf("error getting card: %v", err)
			return
		}

		if updated {
			ctx.EventEnv().Lock()
			ctx.EventEnv().UnlockRender()
		}
	}()
}

func (c *TopNav) DeleteCart(event vugu.DOMEvent, i int) {
	newList := append(c.Cart[:i], c.Cart[i+1:]...)
	ee := event.EventEnv()
	go func() {
		err := c.DeleteCartItem(newList)
		if err != nil {
			ee.Lock()
			log.Printf("error deleting card item: %v", err)
			ee.UnlockRender()
			return
		}
		ee.Lock()
		c.Cart = newList
		ee.UnlockRender()
	}()
}
func (c *TopNav) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {

	vgout = &vugu.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *vugu.VGNode
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute(nil)}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "nav", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "navbar navbar-light bg-light"}}}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "container-fluid"}}}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "a", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "navbar-brand btn"}}}
				vgparent.AppendChild(vgn)
				vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
					EventType:	"click",
					Func:		func(event vugu.DOMEvent) { c.Navigate("/", nil) },
					// TODO: implement capture, etc. mostly need to decide syntax
				})
				{
					vgparent := vgn
					_ = vgparent
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "img", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "src", Val: "https://img.icons8.com/doodle/48/000000/taco.png"}}}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "strong", Attr: []vugu.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "Taco Store"}
						vgparent.AppendChild(vgn)
					}
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
					vgparent.AppendChild(vgn)
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "d-flex cart-hover"}}}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "i", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fa fa-shopping-cart fa-3x pointer"}}}
					vgparent.AppendChild(vgn)
					vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
						EventType:	"click",
						Func:		func(event vugu.DOMEvent) { c.Navigate("/cart", nil) },
						// TODO: implement capture, etc. mostly need to decide syntax
					})
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "span", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "badge badge-warning"}, vugu.VGAttribute{Namespace: "", Key: "style", Val: "height: 20px"}}}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "span", Attr: []vugu.VGAttribute(nil)}
						vgparent.AppendChild(vgn)
						vgn.SetInnerHTML(vugu.HTML("("))
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "span", Attr: []vugu.VGAttribute(nil)}
						vgparent.AppendChild(vgn)
						vgn.SetInnerHTML(len(c.Cart))
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "span", Attr: []vugu.VGAttribute(nil)}
						vgparent.AppendChild(vgn)
						vgn.SetInnerHTML(vugu.HTML(")"))
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
						vgparent.AppendChild(vgn)
					}
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row border cart-mini py-3 px-2"}}}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col "}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							for index, item := range c.Cart {
								var vgiterkey interface{} = index
								_ = vgiterkey
								index := index
								_ = index
								item := item
								_ = item
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "row mb-3 ml-0"}}}
								vgparent.AppendChild(vgn)
								{
									vgparent := vgn
									_ = vgparent
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
									vgparent.AppendChild(vgn)
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-3 p-1"}}}
									vgparent.AppendChild(vgn)
									{
										vgparent := vgn
										_ = vgparent
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
										vgparent.AppendChild(vgn)
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "img", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "img-fluid rounded"}}}
										vgparent.AppendChild(vgn)
										vgn.AddAttrInterface("src", item.ImageUrl)
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
										vgparent.AppendChild(vgn)
									}
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
									vgparent.AppendChild(vgn)
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-7 text-left d-flex "}}}
									vgparent.AppendChild(vgn)
									{
										vgparent := vgn
										_ = vgparent
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
										vgparent.AppendChild(vgn)
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-11 "}}}
										vgparent.AppendChild(vgn)
										{
											vgparent := vgn
											_ = vgparent
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    "}
											vgparent.AppendChild(vgn)
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "span", Attr: []vugu.VGAttribute(nil)}
											vgparent.AppendChild(vgn)
											vgn.SetInnerHTML(item.Title)
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    "}
											vgparent.AppendChild(vgn)
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "p", Attr: []vugu.VGAttribute(nil)}
											vgparent.AppendChild(vgn)
											vgn.SetInnerHTML(format.Currency(item.Price))
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
											vgparent.AppendChild(vgn)
										}
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
										vgparent.AppendChild(vgn)
									}
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
									vgparent.AppendChild(vgn)
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "col-2"}}}
									vgparent.AppendChild(vgn)
									{
										vgparent := vgn
										_ = vgparent
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
										vgparent.AppendChild(vgn)
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "button", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn"}}}
										vgparent.AppendChild(vgn)
										vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
											EventType:	"click",
											Func:		func(event vugu.DOMEvent) { c.DeleteCart(event, index) },
											// TODO: implement capture, etc. mostly need to decide syntax
										})
										{
											vgparent := vgn
											_ = vgparent
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    "}
											vgparent.AppendChild(vgn)
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "i", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "fa fa-times "}}}
											vgparent.AppendChild(vgn)
											vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
											vgparent.AppendChild(vgn)
										}
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
										vgparent.AppendChild(vgn)
									}
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        "}
									vgparent.AppendChild(vgn)
								}
							}
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "p-1"}}}
							vgparent.AppendChild(vgn)
							{
								vgparent := vgn
								_ = vgparent
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
								vgparent.AppendChild(vgn)
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "strong", Attr: []vugu.VGAttribute(nil)}
								vgparent.AppendChild(vgn)
								vgn.SetInnerHTML(vugu.HTML("Sub Total:"))
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
								vgparent.AppendChild(vgn)
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "strong", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "float-right"}}}
								vgparent.AppendChild(vgn)
								vgn.SetInnerHTML(c.GetCartTotal())
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
								vgparent.AppendChild(vgn)
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "mt-3"}}}
								vgparent.AppendChild(vgn)
								{
									vgparent := vgn
									_ = vgparent
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
									vgparent.AppendChild(vgn)
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "button", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-warning p-2 w-50"}}}
									vgparent.AppendChild(vgn)
									vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
										EventType:	"click",
										Func:		func(event vugu.DOMEvent) { c.Navigate("/cart", nil) },
										// TODO: implement capture, etc. mostly need to decide syntax
									})
									{
										vgparent := vgn
										_ = vgparent
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    View Cart\n                                "}
										vgparent.AppendChild(vgn)
									}
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                "}
									vgparent.AppendChild(vgn)
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "button", Attr: []vugu.VGAttribute{vugu.VGAttribute{Namespace: "", Key: "class", Val: "btn btn-warning ml-2 p-2 w-50"}}}
									vgparent.AppendChild(vgn)
									vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, vugu.DOMEventHandlerSpec{
										EventType:	"click",
										Func:		func(event vugu.DOMEvent) { c.Navigate("/checkout", nil) },
										// TODO: implement capture, etc. mostly need to decide syntax
									})
									{
										vgparent := vgn
										_ = vgparent
										vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                                    Checkout\n                                "}
										vgparent.AppendChild(vgn)
									}
									vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                            "}
									vgparent.AppendChild(vgn)
								}
								vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                        "}
								vgparent.AppendChild(vgn)
							}
							vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                    "}
							vgparent.AppendChild(vgn)
						}
						vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n                "}
						vgparent.AppendChild(vgn)
					}
					vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
					vgparent.AppendChild(vgn)
				}
				vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
			}
			vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
		}
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n"}
		vgparent.AppendChild(vgn)
	}
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Data: "style", Attr: []vugu.VGAttribute(nil)}
	{
		vgn.AppendChild(&vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n    .pointer {\n        cursor: pointer;\n    }\n\n    .cart-hover {\n        position: relative;\n    }\n\n    .cart-hover .cart-mini {\n        white-space: nowrap;\n        visibility: hidden;\n        right: 40px;\n        min-width: 370px;\n        border-radius: 6px;\n        background-color: white;\n        position: absolute;\n        z-index: 1;\n        top: 100%;\n    }\n\n    .cart-hover:hover .cart-mini {\n        visibility: visible;\n    }\n\n", Attr: []vugu.VGAttribute(nil)})
	}
	vgout.AppendCSS(vgn)
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value
