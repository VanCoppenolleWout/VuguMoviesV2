<div>
<comps:Header></comps:Header>
    <div class="o-container">
      <div class="o-movies-layout">
        <div class="c-movie">
          <h1 vg-if='len(c.filterType) == 0' class="c-movie--title">All movies</h1>
          <h1 vg-if='len(c.filterType) > 0' class="c-movie--title"><span vg-content='c.filterType'></span> movies</h1>
          <section class="o-movie-layout">
            <div vg-for='_, item := range c.MovieList'>
                <div class="c-movie-img" @click='c.MovieObject = item; c.HandleMovie(event)'>
                  <img
                    class="c-movie--poster"
                    :src="item.Genre"
                    alt=""
                  />
                  <div class="o-layout-img--text">
                    <div class="o-layout-movieinfo">
                      <p class="c-movie--title__txt" vg-content='item.Title'></p>
                      <div class="o-layout-infomovie">
                        <p class="c-movie-hover--txt" vg-content='item.Description'></p>
                        <p class="c-movie-hover--txt" vg-content='item.ReleaseDate'></p>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="o-layout-likes">
                    <div class="o-layout-likes-indv">
                    <svg
                        @click='c.MovieObject = item; c.HandleLike(event)'
                        class="c-svg--like"
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="#A3A3A3"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <path
                        d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"
                        ></path>
                    </svg>
                    <p class="c-movie--like" vg-content='item.Likes'></p>
                </div>
                <div class="o-layout-likes-indv">
                    <svg
                        class="c-svg--comment"
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="#A3A3A3"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                    >
                        <path
                        d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
                        ></path>
                    </svg>
                    <p class="c-movie--comment" >0</p>
                </div>
              </div>
            </div>
          </section>
        </div>
        <aside class="c-filter">
          <div class="o-filter-layout" style="margin-bottom: 2rem">
            <h2 class="c-filter--title">Filters</h2>
            <button @click='c.HandleClear(event)' class="o-button-reset c-filter--btn__clear">
              Clear all
            </button>
          </div>
          <section class="c-filter-section">
            <div class="o-filter-layout">
              <p class="c-filter--subtitle">Genre</p>
              <svg
                vg-if='c.GenreFilter == false'
                @click='c.GenreFilter = !c.GenreFilter'
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="#000000"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M6 9l6 6 6-6" />
              </svg>
              <svg 
                vg-if='c.GenreFilter == true'
                @click='c.GenreFilter = !c.GenreFilter'
                xmlns="http://www.w3.org/2000/svg" 
                width="24" 
                height="24" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="#000000" 
                stroke-width="2" 
                stroke-linecap="round" 
                stroke-linejoin="round"
              >
                <path d="M18 15l-6-6-6 6"/>
              </svg>
            </div>
            <div vg-if='c.GenreFilter' style="margin-top: 0.5rem">
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="drama" @click='c.filterType = "Drama"; c.handleRadio(event)' />
                <label for="drama">Drama</label>
              </div>
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="comedy" @click='c.filterType = "Comedy"; c.handleRadio(event)'/>
                <label for="comedy">Comedy</label>
              </div>
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="sciencefiction" @click='c.filterType = "Science fiction"; c.handleRadio(event)'/>
                <label for="sciencefiction">Science Fiction</label>
              </div>
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="fantasy" @click='c.filterType = "Fantasy"; c.handleRadio(event)'/>
                <label for="fantasy">Fantasy</label>
              </div>
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="action" @click='c.filterType = "Action"; c.handleRadio(event)'/>
                <label for="action">Action</label>
              </div>
              <div class="o-checkbox-layout">
                <input type="radio" name="genre" id="thriller" @click='c.filterType = "Thriller"; c.handleRadio(event)'/>
                <label for="thriller">Thriller</label>
              </div>
            </div>
          </section>
          <section class="c-filter-section">
            <div class="o-filter-layout">
              <p class="c-filter--subtitle">Year</p>
              <svg
                vg-if='c.YearFilter == false'
                @click='c.YearFilter = !c.YearFilter'
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="#000000"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M6 9l6 6 6-6" />
              </svg>
              <svg 
                vg-if='c.YearFilter == true'
                @click='c.YearFilter = !c.YearFilter'
                xmlns="http://www.w3.org/2000/svg" 
                width="24" 
                height="24" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="#000000" 
                stroke-width="2" 
                stroke-linecap="round" 
                stroke-linejoin="round"
              >
                <path d="M18 15l-6-6-6 6"/>
              </svg>
            </div>
            <div vg-if='c.YearFilter' style="margin: 0.5rem 0">
              <label class="c-label" for="">Provide a year.</label>
              <input @change='c.HandleInputYear(event)' class="c-input__year" type="text" name="" id="username" placeholder="2022">
            </div>
          </section>
        </aside>
      </div>
    </div>
</div>

<script type="application/x-go">

import (
    "github.com/vugu/vgrouter"
    "github.com/vugu-examples/taco-store/ui/comps"
    "github.com/vugu-examples/taco-store/ui/state"
    "github.com/vugu-examples/taco-store/internal/memstore"
    "github.com/hasura/go-graphql-client"
    "encoding/json"
    "fmt"
    "context"
    "strconv"
)

type Movies struct {
    vgrouter.NavigatorRef
    
    Items string `vugu:"data"`
    token string
    filterType string `vugu:"data"`
    GenreFilter bool
    YearFilter bool
    Year string
    ClearState bool

    MovieObject struct {
      ID graphql.String `graphql:"id"`
      Title graphql.String `graphql:"title"`
      Genre graphql.String `graphql:"genre"`
      ImgUrl graphql.String `graphql:"imgUrl"`
      Description graphql.String `graphql:"description"`
      ReleaseDate graphql.Int `graphql:"releaseDate"`
      Length graphql.String `graphql:"length"`
      Likes graphql.Int `graphql:"likes"`
      Comments graphql.Int `graphql:"comments"`
    }

    MovieList []struct {
      ID graphql.String `graphql:"id"`
      Title graphql.String `graphql:"title"`
      Genre graphql.String `graphql:"genre"`
      ImgUrl graphql.String `graphql:"imgUrl"`
      Description graphql.String `graphql:"description"`
      ReleaseDate graphql.Int `graphql:"releaseDate"`
      Length graphql.String `graphql:"length"`
      Likes graphql.Int `graphql:"likes"`
      Comments graphql.Int `graphql:"comments"`
    }
}

var q_movies struct {
	Movies []struct {
		ID graphql.String `graphql:"id"`
		Title graphql.String `graphql:"title"`
		Genre graphql.String `graphql:"genre"`
		ImgUrl graphql.String `graphql:"imgUrl"`
		Description graphql.String `graphql:"description"`
		ReleaseDate graphql.Int `graphql:"releaseDate"`
		Length graphql.String `graphql:"length"`
		Likes graphql.Int `graphql:"likes"`
		Comments graphql.Int `graphql:"comments"`
	}
}

var q_moviesclear struct {
	Movies []struct {
		ID graphql.String `graphql:"id"`
		Title graphql.String `graphql:"title"`
		Genre graphql.String `graphql:"genre"`
		ImgUrl graphql.String `graphql:"imgUrl"`
		Description graphql.String `graphql:"description"`
		ReleaseDate graphql.Int `graphql:"releaseDate"`
		Length graphql.String `graphql:"length"`
		Likes graphql.Int `graphql:"likes"`
		Comments graphql.Int `graphql:"comments"`
	}
}

var q_moviebygenre struct {
  Movies []struct {
    ID graphql.String `graphql:"id"`
    Title graphql.String `graphql:"title"`
    Genre graphql.String `graphql:"genre"`
    ImgUrl graphql.String `graphql:"imgUrl"`
    Description graphql.String `graphql:"description"`
    ReleaseDate graphql.Int `graphql:"releaseDate"`
    Length graphql.String `graphql:"length"`
    Likes graphql.Int `graphql:"likes"`
    Comments graphql.Int `graphql:"comments"`
  } `graphql:"movieByGenre(genre: $genre)"`
}

var q_moviebyyear struct {
  Movies []struct {
    ID graphql.String `graphql:"id"`
    Title graphql.String `graphql:"title"`
    Genre graphql.String `graphql:"genre"`
    ImgUrl graphql.String `graphql:"imgUrl"`
    Description graphql.String `graphql:"description"`
    ReleaseDate graphql.Int `graphql:"releaseDate"`
    Length graphql.String `graphql:"length"`
    Likes graphql.Int `graphql:"likes"`
    Comments graphql.Int `graphql:"comments"`
  } `graphql:"movieByYear(releaseDate: $releaseDate)"`
}

var q_movieupdatelike struct {
  Movies []struct {
    ID graphql.String `graphql:"id"`
    Title graphql.String `graphql:"title"`
    Genre graphql.String `graphql:"genre"`
    ImgUrl graphql.String `graphql:"imgUrl"`
    Description graphql.String `graphql:"description"`
    ReleaseDate graphql.Int `graphql:"releaseDate"`
    Length graphql.String `graphql:"length"`
    Likes graphql.Int `graphql:"likes"`
    Comments graphql.Int `graphql:"comments"`
  } `graphql:"updateMovieLike(id: $id)"`
}

func (c *Movies) Init(ctx vugu.InitCtx) {
    c.token = js.Global().Get("localStorage").Call("getItem", "token").String()
    //log.Println(c.token)
    c.MovieList = nil
    q_moviebygenre.Movies = nil 
    q_moviebyyear.Movies = nil 
    q_moviesclear.Movies = nil

    if c.token == "<null>" {
        c.Navigate("/", nil)
    }

    go func() {
    client := graphql.NewClient("http://localhost:8080/query", nil)

    err := client.Query(context.Background(), &q_movies, nil)
    if err != nil {
      fmt.Println(err)
    }

    ctx.EventEnv().Lock()

    c.MovieList = q_movies.Movies

    ctx.EventEnv().UnlockRender()
    }()
}

func (c *Movies) HandleMovie(event vugu.DOMEvent) {
  ee := event.EventEnv()
    go func() {
        ee.Lock()
        js.Global().Get("localStorage").Call("setItem", "movieItem", fmt.Sprintf("%s", c.MovieObject.ID))
        str := js.Global().Get("localStorage").Call("getItem", "movieItem").String()
        log.Println(str)
        c.Navigate("/details", nil)
        ee.UnlockRender()
    }()
}

func (c *Movies) handleRadio(event vugu.DOMEvent) {
  c.ClearState = false
  ee := event.EventEnv()
  c.MovieList = nil
  q_moviebygenre.Movies = nil 
  q_moviebyyear.Movies = nil 
  q_moviesclear.Movies = nil
  log.Println(c.filterType)
  go func() {
    ee.Lock()
    client := graphql.NewClient("http://localhost:8080/query", nil)

    variables := map[string]interface{}{
		  "genre":   graphql.String(c.filterType),
	  } 

    err := client.Query(context.Background(), &q_moviebygenre, variables)
    if err != nil {
      fmt.Println(err)
    }
    c.MovieList = q_moviebygenre.Movies

    ee.UnlockRender()
    }()
}

func (c *Movies) HandleInputYear(event vugu.DOMEvent) {
  c.ClearState = false
  c.Year = event.PropString("target", "value")
  data, _ := strconv.Atoi(c.Year)
  ee := event.EventEnv()
  c.MovieList = nil
  q_moviebygenre.Movies = nil 
  q_moviebyyear.Movies = nil 
  q_moviesclear.Movies = nil
  go func() {
    ee.Lock()
    client := graphql.NewClient("http://localhost:8080/query", nil)

    variables := map[string]interface{}{
		  "releaseDate":   graphql.Int(data),
	  } 

    err := client.Query(context.Background(), &q_moviebyyear, variables)
    if err != nil {
      fmt.Println(err)
    }
    c.MovieList = q_moviebyyear.Movies

    ee.UnlockRender()
    }()
}

func (c *Movies) HandleLike(event vugu.DOMEvent) {
  ee := event.EventEnv()
  log.Println(c.MovieObject.ID)
  go func() {
    ee.Lock()
    client := graphql.NewClient("http://localhost:8080/query", nil)

    variables := map[string]interface{}{
		  "id":   graphql.ID(fmt.Sprintf("%s", c.MovieObject.ID)),
	  } 

    err := client.Query(context.Background(), &q_movieupdatelike, variables)
    if err != nil {
      fmt.Println(err)
    }
    //c.MovieList = q_movieupdatelike.Movies

    ee.UnlockRender()
    }()
}

func (c *Movies) HandleClear(event vugu.DOMEvent) {
  c.ClearState = true
  c.filterType = ""
  ee := event.EventEnv()
  c.MovieList = nil
  q_moviebygenre.Movies = nil 
  q_moviebyyear.Movies = nil 
  q_moviesclear.Movies = nil
  go func() {
    client := graphql.NewClient("http://localhost:8080/query", nil)

    err := client.Query(context.Background(), &q_moviesclear, nil)
    if err != nil {
      fmt.Println(err, "errrr")
    }

    ee.Lock()

    c.MovieList = q_moviesclear.Movies

    ee.UnlockRender()
  }()
}

</script>
