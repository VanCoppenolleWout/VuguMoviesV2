<div>
    <comps:Header></comps:Header>
    <div class="o-container-sm">
      <div class="o-detail-layout">
        <div class="o-layout-detail" vg-for='_, item := range c.MovieStorage'>
          <img
            class="c-movie--poster-big"
            :src="item.Genre"
            alt=""
          />
          <div class="c-detail-rating">
            <div>
              <div class="c-detail-titlesection">
                <p class="c-detail--title" vg-content='item.Title'>Don't Look Up</p>
                <span style="margin-bottom: 2rem;">
                  <span class="c-detail--in" vg-content='item.ReleaseDate'></span>
                  <span class="c-detail--in">, </span>
                  <span class="c-detail--in" vg-content='item.Description'></span>
                  <span class="c-detail--in">, </span>
                  <span class="c-detail--in" vg-content='item.Length'></span>
                </span>
              </div>
  
              <div class="c-detail-mainsection">
                <div class="c-detail-section">
                  <p class="c-detail--rating" vg-content='item.Likes'></p>
                  <p class="c-detail--text">Likes</p>
                </div>
                <div class="c-detail-section">
                  <p class="c-detail--rating" vg-content='item.Likes'></p>
                  <p class="c-detail--text">Comments</p>
                </div>
                <div class="c-detail-section">
                  <p class="c-detail--rating" vg-content='rand.Intn(100 - 40) + 40'></p>
                  <p class="c-detail--text">Score</p>
                </div>
              </div>
            </div>
            
            <div class="o-likes-layout">
              <button class="o-button-reset c-button-like">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#000000"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M18 15l-6-6-6 6" />
                </svg>
                <p class="c-button-like--text">Like</p>
              </button>
              <button class="o-button-reset c-button-like">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#000000"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M6 9l6 6 6-6" />
                </svg>
                <p class="c-button-like--text">Dislike</p>
              </button>
            </div>
          </div>
        </div>

        <div class="c-commentbox">
          <textarea
            @change='c.HandleTextArea(event)'
            class="c-commentbox-input"
            name=""
            id=""
            cols="30"
            rows="10"
            placeholder="Type your review..."
          ></textarea>
          <div class="o-layout-commentbox">
            <div></div>
            <div class="o-layout-commentbox--btn">
              <button @click='c.HandleCancel(event)' class="c-commentbox-cancel o-button-reset">Cancel</button>
              <button @click='c.HandlePostReview(event)' class="c-commentbox-post o-button-reset">Post</button>
            </div>
          </div>
        </div>
        <div class="c-detail-reviews">
          <div vg-for='_, item := range c.ReviewList' class="c-review">
            <div class="o-layout-user">
              <p class="c-review-user" vg-content='item.User.Username'>woutvc</p>
              <p class="c-review-date" vg-content='item.Date'>18/01/2022 - 21:32</p>
            </div>
            <div vg-content='item.Review'>
              Imagine just chilling there, taking a nap, enjoying the ride.
              Suddenly there comes somebody from the other direction, that had
              the same amazing idea. But both you are either napping totally
              unaware of the situation. And either if one was aware and braked,
              you would still crash.
            </div>
            <div class="o-layout-commentbtns">
              <button vg-if='!c.showCommentBox' @click='c.HandleCommentbox(event)' class="o-button-reset c-commentbox-cancel" style="font-size: 0.875rem;">Reply</button>
              <button vg-if='c.showCommentBox' @click='c.showCommentBox = !c.showCommentBox' class="o-button-reset c-commentbox-cancel" style="font-size: 0.875rem;">Cancel</button>
              <button class="o-button-reset c-button-like--comment">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#000000"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M18 15l-6-6-6 6" />
                </svg>
                <p class="c-button-like--text" vg-content='item.Likes'>10</p>
              </button>
              <button class="o-button-reset c-button-like--comment">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#000000"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M6 9l6 6 6-6" />
                </svg>
                <p class="c-button-like--text" vg-content='item.Comments'>3</p>
              </button>
            </div>
            <div vg-if='c.showCommentBox' class="o-layout-reply">
              <textarea class="c-commentbox-input"  name="" id="" cols="30" rows="10" placeholder="Reply..."></textarea>
              <div class="o-layout-reply--btns">
                <button class="o-button-reset c-commentbox-post ">Comment</button>
                <div></div>
              </div>
            </div>
            
          </div>
        </div>
      </div>
    </div>
</div>


<script type="application/x-go">


import (
    "github.com/vugu-examples/taco-store/ui/comps"
    "github.com/hasura/go-graphql-client"
    "log"
    "fmt"
    "math/rand"
    "net/http"
)

type Details struct {
  vgrouter.NavigatorRef
  tokenMovieId, tokenLogin string
  TextAreaInput string
  showCommentBox bool

  MovieStorage []struct {
      ID graphql.String `graphql:"id"`
      Title graphql.String `graphql:"title"`
      Genre graphql.String `graphql:"genre"`
      ImgUrl graphql.String `graphql:"imgUrl"`
      Description graphql.String `graphql:"description"`
      ReleaseDate graphql.Int `graphql:"releaseDate"`
      Length graphql.String `graphql:"length"`
      Likes graphql.Int `graphql:"likes"`
      Comments graphql.Int `graphql:"comments"`
  }

  ReviewList []struct {
			ID graphql.String
			Review graphql.String
			Date graphql.String
			Likes graphql.Int
			Comments graphql.Int
			User struct {
				Username graphql.String
			}
		}
}

var q_moviebyid struct {
  Movies []struct {
    ID graphql.String `graphql:"id"`
		Title graphql.String `graphql:"title"`
		Genre graphql.String `graphql:"genre"`
		ImgUrl graphql.String `graphql:"imgUrl"`
		Description graphql.String `graphql:"description"`
		ReleaseDate graphql.Int `graphql:"releaseDate"`
		Length graphql.String `graphql:"length"`
		Likes graphql.Int `graphql:"likes"`
		Comments graphql.Int `graphql:"comments"`
  } `graphql:"movieById(id: $id)"`
}

var q_reviews struct {
  Reviews []struct {
    ID graphql.String
    Review graphql.String
    Date graphql.String
    Likes graphql.Int
    Comments graphql.Int
    User struct {
      Username graphql.String
    }
  }
}

var q_createreview struct {
  CreateReview struct {
    Review graphql.String
    Date graphql.String
    Likes graphql.Int
    Comments graphql.Int
    User struct {
      Username graphql.String
    }
  } `graphql:"createReview(input: {review: $review, date: $date, likes: $likes, comments: $comments})"`
}

func (c *Details) Init(ctx vugu.InitCtx) { 
  c.tokenMovieId = js.Global().Get("localStorage").Call("getItem", "movieItem").String()
  log.Println(c.tokenMovieId, "token movie in details")
  c.tokenLogin = js.Global().Get("localStorage").Call("getItem", "token").String()
  go func() {
    client := graphql.NewClient("http://localhost:8080/query", nil)

    variables := map[string]interface{}{
		  "id":   graphql.ID(c.tokenMovieId),
	  } 

    err := client.Query(context.Background(), &q_moviebyid, variables)
    if err != nil {
      fmt.Println(err)
    }

    ctx.EventEnv().Lock()

    fmt.Println(q_moviebyid.Movies)

    c.MovieStorage = q_moviebyid.Movies
    log.Println(c.MovieStorage, "data for detailpage")

    ctx.EventEnv().UnlockRender()
  }()

  go func() {
    client := graphql.NewClient("http://localhost:8080/query", nil)

    err := client.Query(context.Background(), &q_reviews, nil)
    if err != nil {
      fmt.Println(err)
    }

    ctx.EventEnv().Lock()

    c.ReviewList = q_reviews.Reviews

    ctx.EventEnv().UnlockRender()
    }()
  
  log.Println(c.tokenLogin, "detail token storage")
    if c.tokenLogin == "<null>" {
      ctx.EventEnv().Lock()
      c.Navigate("/", nil)
      ctx.EventEnv().UnlockRender()
  }
}

func (c *Details) HandleCommentbox(event vugu.DOMEvent) {
  c.showCommentBox = true
}

func (c *Details) HandleTextArea(event vugu.DOMEvent) {
  c.TextAreaInput = event.PropString("target", "value")
}

func (c *Details) HandleCancel(event vugu.DOMEvent) {
  //c.TextAreaInput = event.PropString("target", "value")
}

func setAuthHeader(secret string) func(req *http.Request) {
	return func(req *http.Request) {
		req.Header.Add("Authorization", secret)
	}
}

func (c *Details) HandlePostReview(event vugu.DOMEvent) {
  log.Println(c.TextAreaInput)
  if len(c.TextAreaInput) > 0 {
    log.Println("submit review")
    go func () {
      client := graphql.NewClient("http://localhost:8080/query", nil)
      client = client.WithRequestModifier(setAuthHeader(c.tokenLogin))

      variables := map[string]interface{}{
        "review": graphql.String(c.TextAreaInput),
        "date": graphql.String("2022-01-21 13:30:00"),
        "likes": graphql.Int(0),
        "comments": graphql.Int(0),
      }

      err := client.Mutate(context.Background(), &q_createreview, variables)
      if err != nil {
        fmt.Println(err)
      }
    }()
  }
}

</script>
